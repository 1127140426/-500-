package Test.May;

/** leetCode 1025:除数博弈
 * 爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。
 * 最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：
 * 选出任一 x，满足 0 < x < N 且 N % x == 0 。
 * 用 N - x 替换黑板上的数字 N 。如果玩家无法执行这些操作，就会输掉游戏。
 * 只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。
 * 示例 1：
 * 输入：2
 * 输出：true
 * 解释：爱丽丝选择 1，鲍勃无法进行操作。
 * 示例 2：
 * 输入：3
 * 输出：false
 * 解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。
 *
 */
public class Test1025_divisorGame {
    public static void main(String[] args) {
        System.out.println(divisorGame(3));
    }



    public static boolean divisorGame(int N) {
        //相加减，同为偶，异为奇||相乘除，有偶则为偶
        //
        /*偶数先手必胜。因为先手为偶数的话，先手只需要让自己每步都保持偶数，
        那么他可以通过让对手得到的数为奇数，比如偶数-1就是奇数了，对手拿到奇数，
        那么能整除的只有奇数，奇数-奇数又回到了偶数，最后先手一定会得到最小的偶数2，
        然后-1让对手得到1，对手无解，必胜。
        同理，谁拿到了奇数，谁必败。.*/

        return N % 2 == 0;
    }

}
